{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "AquaTrack Application",
    "license": {
      "name": "AquaTrack",
      "url": "https://aqua-track-phi.vercel.app/"
    },
    "description": "Team 6"
  },
  "tags": [
    {
      "name": "Water",
      "description": "Operations about water tracking."
    },
    {
      "name": "Users",
      "description": "Operations about authentication and user management."
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server for testing"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/water/daily": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get daily water consumption",
        "operationId": "getDailyWater",
        "description": "Retrieve the list of all water records consumed on a specific day",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "day",
            "description": "The specific day to retrieve water records (Format: YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-03-05"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved daily water records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved daily water records!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1water/post/responses/201/content/application~1json/schema/properties/data"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/water/monthly": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get monthly water consumption",
        "operationId": "getMonthlyWater",
        "description": "Retrieve a list of total daily water consumption for a specific month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "description": "The specific month to retrieve water records (Format: YYYY-MM)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-03"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved monthly water records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved monthly water records!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "date",
                          "totalVolume"
                        ],
                        "properties": {
                          "date": {
                            "description": "Date of the record (YYYY-MM-DD)",
                            "type": "string",
                            "format": "date",
                            "example": "2025-03-01"
                          },
                          "totalVolume": {
                            "description": "Total amount of water drunk per day (ml)",
                            "type": "number",
                            "example": 2100
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Create a water intake record",
        "operationId": "addWater",
        "description": "Create a new record of water intake with volume and timestamp",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "volume",
                  "date"
                ],
                "properties": {
                  "volume": {
                    "description": "Amount of water consumed (ml)",
                    "type": "number",
                    "minimum": 1,
                    "example": 250
                  },
                  "date": {
                    "description": "Timestamp of water intake",
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-03-05T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a water intake record",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a water intake record!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "volume",
                        "date",
                        "userId"
                      ],
                      "properties": {
                        "_id": {
                          "description": "Backend-generated unique identifier",
                          "type": "string",
                          "example": "67a1f598a6ed272da1c633fd"
                        },
                        "volume": {
                          "description": "The amount of water drunk, ml",
                          "type": "number",
                          "example": 250
                        },
                        "date": {
                          "description": "Time of drinking a portion of water",
                          "type": "string",
                          "example": "2025-03-05T10:00:00.000+00:00"
                        },
                        "userId": {
                          "description": "Record owner id",
                          "type": "string",
                          "example": "67a1f598a6ed272da1c632df"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Session ID and refresh token are required"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "UnauthorizedError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid credentials or access token expired"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Something went wrong"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update water record",
        "operationId": "updateWater",
        "description": "Update a specific water record by its ID with new volume and date",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier of the water record",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598008"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "volume",
                  "date"
                ],
                "properties": {
                  "volume": {
                    "description": "The amount of water drunk, ml",
                    "type": "number",
                    "example": 250
                  },
                  "date": {
                    "description": "Time of drinking a portion of water",
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-03-05T10:00:00.000+00:00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the water record",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the water record!"
                    },
                    "data": {
                      "$ref": "#/paths/~1water/post/responses/201/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User not found or data does not exist"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete water record",
        "operationId": "deleteWater",
        "description": "Delete a specific water record by its ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier of the water record",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598008"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the water record!"
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "404": {
            "$ref": "#/paths/~1water~1%7Bid%7D/patch/responses/404"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register User",
        "operationId": "signupUser",
        "description": "Register a new user and get tokens",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User Email",
                    "type": "string",
                    "example": "kseniia@gmail.com"
                  },
                  "password": {
                    "description": "User Password",
                    "type": "string",
                    "example": "Qwerty12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a new user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "sessionId",
                    "accessToken",
                    "refreshToken",
                    "user"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a new user!"
                    },
                    "sessionId": {
                      "type": "string",
                      "example": "67d18a604054995b6afe00f7"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "2zQaqOpj5WrfbR32j0UAh7WAtaIoaRYkYNVZKg6T"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "new-refresh-token-1234"
                    },
                    "user": {
                      "type": "object",
                      "required": [
                        "_id",
                        "email",
                        "password",
                        "name",
                        "gender",
                        "weight",
                        "dailySportTime",
                        "dailyNorm"
                      ],
                      "properties": {
                        "_id": {
                          "description": "User's id",
                          "type": "string",
                          "example": "67a1f598a6ed272da1c632df"
                        },
                        "name": {
                          "description": "User's name",
                          "type": "string",
                          "example": "Kseniia Kseniia"
                        },
                        "email": {
                          "description": "User's email",
                          "type": "string",
                          "example": "kseniia@gmail.com"
                        },
                        "password": {
                          "description": "User's password",
                          "type": "string",
                          "writeOnly": true,
                          "example": "Qwerty12345"
                        },
                        "gender": {
                          "description": "User's gender",
                          "type": "string",
                          "example": "woman"
                        },
                        "weight": {
                          "description": "User's weight",
                          "type": "number",
                          "example": 45
                        },
                        "dailySportTime": {
                          "description": "Daily number of hours of sports",
                          "type": "number",
                          "example": 2.5
                        },
                        "dailyNorm": {
                          "description": "The daily rate of water is set, ml",
                          "type": "number",
                          "example": 2000
                        },
                        "avatarUrl": {
                          "description": "User's avatar url",
                          "type": "string",
                          "example": "https://res.cloudinary.com/douwe7mix/image/upload/v1738700367/ily2elrvnt2hradnchj3.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "409": {
            "description": "Conflict Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "ConflictError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email already in use"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login User",
        "operationId": "signinUser",
        "description": "Login User into the Application and get tokens",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User Email",
                    "type": "string",
                    "example": "kseniia@gmail.com"
                  },
                  "password": {
                    "description": "User Password",
                    "type": "string",
                    "example": "Qwerty12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in a user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "sessionId",
                    "accessToken",
                    "refreshToken",
                    "user"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!"
                    },
                    "sessionId": {
                      "type": "string",
                      "example": "67d18a604054995b6afe00f7"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "2zQaqOpj5WrfbR32j0UAh7WAtaIoaRYkYNVZKg6T"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "5zQaqOpj5WrfbR32j0UAh8WAtaIoaRYkYNVZKg6R"
                    },
                    "user": {
                      "$ref": "#/paths/~1users~1signup/post/responses/201/content/application~1json/schema/properties/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refresh Users Session",
        "operationId": "refreshUsersSession",
        "description": "Refresh Users Session and get new access and refresh tokens",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionId",
                  "refreshToken"
                ],
                "properties": {
                  "sessionId": {
                    "description": "ID of the user session",
                    "type": "string",
                    "example": "67d18a604054995b6afe00f7"
                  },
                  "refreshToken": {
                    "description": "Refresh token to generate new access token",
                    "type": "string",
                    "example": "new-refresh-token-1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "sessionId",
                    "accessToken",
                    "refreshToken",
                    "user"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "sessionId": {
                      "type": "string",
                      "example": "67d18a604054995b6afe00f7"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "2zQaqOpj5WrfbR32j0UAh7WAtaIoaRYkYNVZKg6T"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "new-refresh-token-1234"
                    },
                    "user": {
                      "$ref": "#/paths/~1users~1signup/post/responses/201/content/application~1json/schema/properties/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Session ID and refresh token are required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout User",
        "operationId": "logoutUser",
        "description": "Logout User from the application and clear session cookies",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logged out successfully. No content returned."
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get info about current User",
        "operationId": "currentUser",
        "description": "Get full info about the currently authenticated user",
        "responses": {
          "200": {
            "description": "Successfully retrieved current user info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "accessToken",
                    "user"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully got full info about current User!"
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "User's access token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "$ref": "#/paths/~1users~1signup/post/responses/201/content/application~1json/schema/properties/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Data",
        "operationId": "patchUser",
        "description": "Update the user data with the given payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "Kseniia Kseniia"
                  },
                  "email": {
                    "description": "User's email (must be unique)",
                    "type": "string",
                    "example": "kseniia@gmail.com"
                  },
                  "gender": {
                    "description": "User's gender",
                    "type": "string",
                    "example": "woman"
                  },
                  "weight": {
                    "description": "User's weight",
                    "type": "number",
                    "example": 45
                  },
                  "dailySportTime": {
                    "description": "Daily number of hours of sports",
                    "type": "number",
                    "example": 2.5
                  },
                  "dailyNorm": {
                    "description": "The daily rate of water is set, ml",
                    "type": "number",
                    "example": 2000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user data!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "user"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user data!"
                    },
                    "user": {
                      "$ref": "#/paths/~1users~1signup/post/responses/201/content/application~1json/schema/properties/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "409": {
            "$ref": "#/paths/~1users~1signup/post/responses/409"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Avatar",
        "operationId": "patchUserAvatar",
        "description": "Update the user avatar by uploading a binary image",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatarUrl"
                ],
                "properties": {
                  "avatarUrl": {
                    "description": "User's avatar image",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user avatar"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "avatarUrl"
                      ],
                      "properties": {
                        "avatarUrl": {
                          "description": "Updated avatar URL",
                          "type": "string",
                          "example": "https://res.cloudinary.com/douwe7mix/image/upload/v1738700367/ily2elrvnt2hradnchj3.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/counter": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get registered users counter",
        "operationId": "counterUsers",
        "description": "Get some info about registered users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved registered users count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "usersCount",
                    "lastUsersAvatars"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully got total count of registered users!"
                    },
                    "usersCount": {
                      "type": "number",
                      "example": 1488
                    },
                    "lastUsersAvatars": {
                      "type": "array",
                      "description": "List of the latest user avatars",
                      "items": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://res.cloudinary.com/douwe7mix/image/upload/v1738700367/ily2elrvnt2hradnchj3.jpg"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/get-oauth-url": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "generateAuthUrl",
        "description": "Retrieve the OAuth URL for Google authentication",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully generated Google OAuth URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved Google OAuth URL!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "url",
                        "redirectUri"
                      ],
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Google OAuth authorization URL",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=1009566289844-rasqo982n443uj1vr7jeu1gu8tdqrleq.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fconfirm-google-auth"
                        },
                        "redirectUri": {
                          "type": "string",
                          "description": "The redirect URI after authentication",
                          "example": "http://localhost:3000/confirm-google-auth"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/confirm-oauth": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Confirm OAuth",
        "operationId": "loginOrSignUpWithGoogle",
        "description": "Confirm login or sign up via Google OAuth",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "description": "Login Ticket received from Google OAuth",
                    "type": "string",
                    "example": "4/0AdQt8qjfTrL3..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in via Google OAuth!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in via Google OAuth!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "refreshToken",
                        "user"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "IjwqHilOmfp8v0acuSSTuiEsYDH3x3CuOY84Wvxf"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "dF56hgjUqweYxLt8WvzPOnJqZp3RBmNVXGKo7CZ"
                        },
                        "user": {
                          "type": "object",
                          "required": [
                            "id",
                            "email",
                            "name",
                            "avatarUrl",
                            "gender",
                            "weight",
                            "dailySportTime",
                            "dailyNorm"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "67a1f598a6ed272da1c632df"
                            },
                            "email": {
                              "type": "string",
                              "example": "kseniia@gmail.com"
                            },
                            "name": {
                              "type": "string",
                              "example": "Kseniia Kseniia"
                            },
                            "avatarUrl": {
                              "type": "string",
                              "example": "https://res.cloudinary.com/douwe7mix/image/upload/v1738700367/ily2elrvnt2hradnchj3.jpg"
                            },
                            "gender": {
                              "type": "string",
                              "example": "woman"
                            },
                            "weight": {
                              "type": "number",
                              "example": 45
                            },
                            "dailySportTime": {
                              "type": "number",
                              "example": 2.5
                            },
                            "dailyNorm": {
                              "type": "number",
                              "example": 2000
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1water/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1water/post/responses/401"
          },
          "500": {
            "$ref": "#/paths/~1water/post/responses/500"
          }
        }
      }
    },
    "/users/send-reset-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Send reset to email",
        "operationId": "sendResetToken",
        "description": "Send reset password message to email from the Application",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "description": "User Email",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email was successfully sent!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email was successfully sent!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset password",
        "operationId": "resetPassword",
        "description": "Reset password from email message in the Application",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "description": "JWT Token from email",
                    "type": "string"
                  },
                  "password": {
                    "description": "New password",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email was successfully sent!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password was successfully reset!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "UnauthorizedError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Token is expired or invalid."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
